"""
Author:
Affiliation:
Aim:
Data:
Run: snakemake -s Snakefile
Changelog:
"""
from sequoia import snakemake as sm

# Change parameters inside config.json
configfile: "config.json"


workdir: "."
sm.message("Sequoia pipeline biomics")
sm.message("The current working directory is " )

############# NOTHING to change here below

include: sm.rules['dag']

vc = sm.ValidateConfig(config)
config = vc()


get_prefixes = lambda filename: filename.split(".")[0]

if "cutadapt_params" in config.keys():
    config['cutadapt_params'] = " ".join([x + " " + y
        for x,y in config.cutadapt_params.items()])

DATA = [get_prefixes(config.R1), get_prefixes(config.R2)]



tags = {'sample':""}

if config['sample'] in [-1, '-1', False]:
    config['sample'] = False

if config['sample'] is not False:
    tags['sample'] = ".sample"


rule all:
    input:
        # select a subset of the reads
        expand("fastq_clean/{dataset}%(sample)s.fastq.gz" % tags,
            dataset=DATA),

        # remove adapters
        #expand("fastq_cutadapt/{dataset}.cutadapt%(sample)s.fastq.gz" % tags,
        #    dataset=DATA),

        # perform a quality control after adapter removal
        expand("fastqc_results/{dataset}.cutadapt%(sample)s_fastqc.zip" % tags,
            dataset=DATA),

        # a report
        "dag.svg"


rule fastq_head:
    message: "Extracting only a subset of the raw data"
    input:  "fastq_raw/{dataset}.fastq.gz"
    output: "fastq_clean/{dataset}%(sample)s.fastq.gz" % tags
    params: sample = config['sample']
    run:
        if config['sample'] is False:
            # symbolic link use force to avoid error if it exists already
            shell("ln -f -s ../{input} {output}")
        else:
            shell("fastq_head {input} {params.sample} {output}")


rule cutadapt:
    message: "Filtering reads for adapters and bad quality"
    input: expand("fastq_clean/{dataset}%(sample)s.fastq.gz" % tags, dataset=DATA)
    output:
        R1 = "fastq_cutadapt/" + DATA[0] + ".cutadapt%(sample)s.fastq.gz" % tags,
        R2 = "fastq_cutadapt/" + DATA[1] + ".cutadapt%(sample)s.fastq.gz" % tags
    params: config.cutadapt_params
    shell : "cutadapt -o {output.R1} -p {output.R2} {input} {params}"


rule fastqc:
    input: "fastq_cutadapt/{dataset}.cutadapt%(sample)s.fastq.gz" % tags
    output: "fastqc_results/{dataset}.cutadapt%(sample)s_fastqc.zip" % tags
    params: dir="fastqc_results"
    log: "fastqc_{dataset}.log"
    threads: 2
    shell:  "fastqc -t {threads} --outdir {params.dir} {input} > {params.dir}/{log}"


rule bwa_index_contaminant:
    input: config.contaminant
    output: touch("bwa_index_contaminant")
    threads: 8
    shell: "bwa index {input}"


"""rule contaminant:
    input: config.contaminant
    output

  "(bwa mem {snakemake.params} -t {snakemake.threads} "
    "{snakemake.input.ref} {snakemake.input.sample} "
    "| samtools view -Sbh -o {snakemake.output[0]} -) 2> {snakemake.log}")
"""


rule clean:
    shell:
        """
        rm -rf fastqc_results
        rm -rf fastq_sample
        rm -rf fastq_clean
        rm -rf fastq_cutadapt
        rm -f dag.svg dat.dot
        """

"""
onsuccess:
    print("Workflow finished without errors")
    shell("mail -s \"Snakemake finished\" thomas.cokelaer@pasteur.fr < {log}")

onerror:
    print("An error occured")
    shell("mail -s \"an error occured\" thomas.cokelaer@pasteur.fr < {log}")
"""
