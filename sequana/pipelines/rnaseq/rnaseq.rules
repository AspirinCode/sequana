"""RNASeq pipeline

Affiliation: Institut Pasteur @ 2016

This pipeline is part of Sequana software (sequana.readthedocs.io)
"""
import os
import sequana
from sequana import snaketools as sm
sm.init("rnaseq.rules", globals())


# This must be defined before the include 
configfile: "config.yaml"

# Generic include of some dynamic modules
exec(open(sequana.modules["bowtie1_mapper_dynamic"], "r").read())
exec(open(sequana.modules["fastqc"], "r").read())


manager = sm.PipelineManager("rnaseq", config)

__data__input = manager.getrawdata()


TODO = ""

# FASTQC on input data set
__fastqc_samples__input_fastq = __data__input
__fastqc_samples__output_done = manager.getname("fastqc_samples", ".done")
__fastqc_samples__wkdir       = manager.getwkdir("fastqc_samples")
include: fastqc_dynamic("samples", manager.sample)
expected_output.extend(expand(__fastqc_samples__output_done, sample=manager.samples))


# Clean NGS
if manager.config.adapter_removal.tool == "clean_ngs":
    __clean_ngs__input_fastq = __data__input
    __clean_ngs__output = TODO
    include: sm.modules("clean_ngs")
    expected_output.extend(expand(__clean_ngs__output, sample=manager.samples))
elif manager.config.adapter_removal.tool == "cutadapt":
    pass
    # TODO
    """
    __cutadapt__input_fastq = __data__input
    __cutadapt__output = TODO
    include: sm.modules("clean_ngs")
    expected_output.extend(expand(__clean_ngs__output, sample=manager.samples))
    """
else:
    raise ValueError("Invalid choice of adapter_removal:tool in config file. Use either clean_ngs or cutadapt")


# Fastq Screen
__fastq_screen__input = __clean_ngs__output
__fastq_screen__output = TODO
include: sm.modules("clean_ngs")
expected_output.extend(expand(__clean_ngs__output, sample=manager.samples))


# FASTQC on input data set
__fastqc_samples__input_fastq = __clean_ngs__output
__fastqc_samples__output_done = manager.getname("fastqc_samples", ".done")
__fastqc_samples__wkdir       = manager.getwkdir("fastqc_samples")
include: fastqc_dynamic("samples", manager.sample)
expected_output.extend(expand(__fastqc_samples__output_done, sample=manager.samples))


# rRNA 
__bowtie1_rna__input = __clean_ngs__output
__bowtie1_rna__output = TODO
include: sm.modules("bowtie1_rRNA")
expected_output.extend(expand(__bowtie1_rna__output, sample=manager.samples))


# Mapper
__mapping_ref__input = __clean_ngs__output
__mapping_ref__output = TODO
include: sm.modules("bowtie1_mapping_ref")
expected_output.extend(expand(__bowtie1_mapping_ref__output, sample=manager.samples))


# Feature counts from subread suite
__feature_counts__input == __mapping_ref__outut
__feature_counts__output_count = manager.getname("feature_counts")
__feature_counts__output_gene_count = manager.getname("feature_counts")
__feature_counts__log = manager.getname("feature_counts", ".logs")
include: sm.modules("feature_counts")
expected_output.extend(expand(__feature_counts__output_gene_count, sample=manger.samples))


# Multiqc rule
__multiqc__input_dir = "."
__multiqc__logs = "multiqc/multiqc.log"
__multiqc__output = "multiqc/multiqc_report.html")
include: sm.modules("multiqc")
expected_output.extend(__multiqc__output)


# include overall dag file
__dag__input = __snakefile__
__dag__output = "dag.svg"
include: sm.modules['dag']
expected_output.extend(["dag.svg"])


# Include rule graph for each sample
__rulegraph__input = __snakefile__
__rulegraph__output = "rulegraph.svg"
__rulegraph__mapper = {"fastqc_samples": "fastqc_samples/"}
include: sm.modules['rulegraph']
expected_output.extend(["rulegraph.svg"])


# Add Conda
__conda__output = "requirements.txt"
include: sm.modules['conda']   # Create requirements.txt(dependencies)
expected_output.extend([__conda__output])

# Those rules takes a couple of seconds so no need for a cluster
localrules: dag, conda, rulegraph


rule pipeline_quality_control:
    input: expected_output


onsuccess:
    import os
    # Create plots about stats
    sm.plot_stats(N=len(manager.samples))

    # Main directory
    report_dir_format = "%(proj)s/report_qc_%(proj)s"
    for proj in manager.samples.keys():
        report_dir = report_dir_format % {"proj": proj}
        try:os.mkdir(report_dir)
        except:pass

        shell("cp %s %s" % (__snakefile__, report_dir))
        shell("cp rulegraph.svg %s/dag.svg" % (report_dir))
        shell("cp config.yaml %s" % report_dir)
        shell("cp requirements.txt %s" % report_dir)
        shell("cp snakemake_stats.png %s" % report_dir)

        from sequana import SequanaSummary
        summary = SequanaSummary(proj, directory=report_dir, 
            output_filename="summary.html", 
            snakefile=__snakefile__, configfile=report_dir+"/config.yaml",
            manager=manager)
        summary.create_report()

        # Create a cleanup python file to clean a sub-directory
        sm.create_cleanup(proj)

    sm.create_recursive_cleanup()
    sm.message("Done. To further cleanup the directory, type \n python .sequana_cleanup.py")

onerror:
    print("An error occurred. See message above.")


