"""Isoseq pipeline

Affiliation: Institut Pasteur @ 2018

This pipeline is part of Sequana software (sequana.readthedocs.io)
"""
import os
import sequana
from os.path import join
from sequana import snaketools as sm
sm.init("pacbio_isoseq.rules", globals())


# This must be defined before the include
configfile: "config.yaml"
__snakefile__ = srcdir(__snakefile__)



manager = sm.PipelineManager("pacbio_isoseq", config)

__data__input = manager.getrawdata()

#Primer removal and demultiplexing
__lima__input = __data__input
__lima__output = manager.getname("lima", "demux.ccs.bam")
__lima__barcoded_primers = config["lima"]["primers"]
include: sm.modules['lima']
expected_output.extend([__lima__output])


#Clustering and transcript clean up
__cluster__input = __lima__output
__cluster__output = manager.getname("cluster", "_unpolished.bam")
__cluster__log_std = "%s/logs/cluster/stdout.logs" % manager.sample
__cluster__log_err = "%s/logs/cluster/stderr.logs" % manager.sample
include: sm.modules['cluster']
expected_output.extend([__cluster__output])

#Polishing
__polish__input = __cluster__output
__polish__output = manager.getname("polish", "_polished.bam")
__polish__log_std = "%s/logs/polish/stdout.logs" % manager.sample
__polish__log_err = "%s/logs/polish/stderr.logs" % manager.sample
include: sm.modules['polish']
expected_output.extend([__polish__output])




# Include rule graph for each sample
__rulegraph__input = __snakefile__
__rulegraph__output = "rulegraph/rulegraph.svg"
__rulegraph__mapper = {"fastqc_samples": "fastqc_samples/"}
include: sm.modules['rulegraph']
expected_output.extend([__rulegraph__output])


# Add Conda
__conda__output = "requirements.txt"
include: sm.modules['conda']   # Create requirements.txt(dependencies)
expected_output.extend([__conda__output])


# Those rules takes a couple of seconds so no need for a cluster
localrules: conda, rulegraph

rule pacbio_isoseq:
    input: expected_output


onsuccess:
    import os
    # Create plots about stats
    sm.plot_stats(N=len(manager.samples))

    # Main directory
    report_dir_format = "%(proj)s/report_pacbio_isoseq_%(proj)s"
    for proj in manager.samples.keys():
        report_dir = report_dir_format % {"proj": proj}
        try:os.mkdir(report_dir)
        except:pass

        shell("cp %s %s" % (__snakefile__, report_dir))
        #shell("cp rulegraph.svg %s/rulegraph.svg" % (report_dir))
        shell("cp config.yaml %s" % report_dir)
        shell("cp requirements.txt %s" % report_dir)
        shell("cp snakemake_stats.png %s" % report_dir)
        try: os.mkdir("cluster_logs")
        except:pass

        try: shell("mv slurm* cluster_logs/")
        except: pass

        # Create a cleanup python file to clean a sub-directory
        sm.create_cleanup(proj)

    sm.OnSuccess()() # create instance to create main cleanup


onerror:
    print("An error occurred. See message above.")


