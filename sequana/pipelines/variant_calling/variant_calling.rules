"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Variant calling
Data: paired end or single reads
Run: snakemake -s variant_calling.rules
"""

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig
from sequana import SnpEff
sm.init("variant_calling.rules", globals())


configfile: "config.yaml"
cfg = SequanaConfig(config)

final_output = []

# If annotation file is not provided
__report_mapping__ann = None
__report_mapping__ann_format = None

project = cfg.PROJECT
if not project:
    project = sm.FastQFactory(cfg.DATASET).tags[0]

try:
    # recovers differents samples in directory
    glob_dir = config["input_directory"] + "/*fastq.gz"
    ff = sm.FastQFactory(glob_dir)
    ff_dict = {tag: [ff.get_file1(tag), ff.get_file2(tag)] if ff.get_file2(tag) 
                else [ff.get_file1(tag)] for tag in ff.tags}
    # set basename for output of all rules
    basename = "{sample}/%s/{sample}"
    project = "{sample}"
    # first input must be function to recover complete file name
    __bwa_mem_ref__input = lambda wildcards: ff_dict[wildcards.sample] 
except (TypeError, KeyError):
    basename = project + "/%s/" + project
    __bwa_mem_ref__input = cfg.DATASET

report_dir = "%(proj)s/%(proj)s_report_vc/" % {"proj": project}

exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())

# we must check if we are in the case of denovo assembly:
try:
    __report_mapping__quast_input = __quast__output
except NameError:
    __bwa_mem_ref__ref_input = config["bwa_ref"]["reference"]
    __report_mapping__quast_input = []

# Generate data directory for SnpEff and annotation file for coverage
if config["snpeff"]["do"]:
    tmp = SnpEff(config["snpeff"]["reference"])
    __add_locus_in_fasta__fasta_input = __bwa_mem_ref__ref_input
    __add_locus_in_fasta__output = basename % ("add_locus_in_fasta") + ".fasta"
    include: sm.modules["add_locus_in_fasta"]
    __bwa_mem_ref__ref_input = __add_locus_in_fasta__output
    __report_mapping__ann_input = config["snpeff"]["reference"]
else:
    __report_mapping__ann_input = []

# Mapping
__bwa_mem_ref__reference = basename % ("reference") + ".fasta"
__bwa_mem_ref__mem_output = basename % ("bwa_mem_ref") + ".bam"
__bwa_mem_ref__sort_output = basename % ("bwa_mem_ref") + ".sorted.bam"
include: bwa_mem_dynamic("ref", project)
# set input of next rules 
__mark_duplicates__input = __bwa_mem_ref__sort_output
__indel_realigner__input = __bwa_mem_ref__sort_output
__freebayes__input = __bwa_mem_ref__sort_output

# Indel realigner
if config["indel_realigner"]["do"]:
    # create_sequence_dictionary input
    __create_sequence_dictionary__reference = __bwa_mem_ref__reference
    # create_sequence_dictionary output
    __create_sequence_dictionary__output = __bwa_mem_ref__reference.split(
            ".fa")[0] + ".dict"
    include: sm.modules["create_sequence_dictionary"]
    # indel_realigner inputs
    __indel_realigner__reference = __bwa_mem_ref__reference
    __indel_realigner__ref_dict = __create_sequence_dictionary__output
    # indel_realigner outputs
    __indel_realigner__output = basename % ("indel_realigner") + ".bam"
    __indel_realigner__intervals = basename % ("indel_realigner") + ".intervals"
    include: sm.modules["indel_realigner"]
    __mark_duplicates__input = __indel_realigner__output
    __freebayes__input = __indel_realigner__output

# Mark duplicates
if config["mark_duplicates"]["do"]:
    __mark_duplicates__output = basename % ("mark_duplicates") + ".bam"
    __mark_duplicates__metrics = basename % ("mark_duplicates") + ".metrics"
    include: sm.modules["mark_duplicates"]
    __freebayes__input = __mark_duplicates__output

# Mapping report
if config["report_mapping"]["do"]:
    __bedtools_genomecov__input = __bwa_mem_ref__sort_output
    __bedtools_genomecov__output = basename % ("bedtools_genomecov") + ".bed"
    include: sm.modules["bedtools_genomecov"]
    __report_mapping__input = __bedtools_genomecov__output
    try:
        __report_mapping__bam_input = __mark_duplicates__output
    except NameError:
        __report_mapping__bam_input = __bwa_mem_ref__sort_output
    __report_mapping__project = project
    __report_mapping__directory = report_dir
    __report_mapping__output = report_dir + "report_mapping.html"
    include: sm.modules["report_mapping"]
    try:
        final_output.append(expand(__report_mapping__output, sample=ff_dict))
    except NameError:
        final_output.append(__report_mapping__output)
    
# Variant calling
__freebayes__reference = __bwa_mem_ref__reference
__freebayes__output = basename % ("freebayes") + ".vcf"
include: sm.modules["freebayes"]

# snpEff
if config["snpeff"]["do"]: 
    __snpeff__input = __freebayes__output
    __snpeff__output = basename % ("snpeff") + ".ann.vcf"
    include: sm.modules["snpeff"]
    __vcf_filter__input = __snpeff__output
else:
    __vcf_filter__input = __freebayes__output

# VCF filter
__vcf_filter__output = basename % ("vcf_filter") + ".filter.vcf"
include: sm.modules["vcf_filter"]
__report_variant__input = __vcf_filter__output

# report vcf
__report_variant__directory = report_dir
__report_variant__html_output = report_dir + "report_variant.html"
__report_variant__csv_output = report_dir + "variants.csv"
include: sm.modules["report_variant"]
try:
    final_output.append(expand(__report_variant__html_output, sample=ff_dict))
except NameError:
    final_output.append(__report_variant__html_output)

#__conda__output = report_dir + "requirements.txt"
#include: sm.modules["conda"] # Create requirements.txt(dependencies)
#__dag__output = report_dir
#include: sm.modules["dag"]
#try:
#    final_output.extend([expand(__dag__output + "dag.svg", sample=ff_dict), 
#                        expand(__conda__output, sample=ff_dict)])
#except NameError:
#    final_output.extend([__dag__output + "dag.svg", __conda__output])


rule pipeline_variant:
    input:
        final_output


onsuccess: 
    sm.plot_stats()
    try:
        projects = ff_dict.keys()
    except NameError:
        projects = [project]
    report_dir_format = "%(proj)s/%(proj)s_report_vc/"
    for proj in projects:
        report_dir = report_dir_format % {"proj": proj}
        print(report_dir)
        shell("cp %s %s/" % (__snakefile__, report_dir))
        shell("cp %s %s/" % (__snakefile__, report_dir))
        shell("cp config.yaml %s/" % report_dir)
        shell("cp %s %s" % (proj + "/freebayes/*vcf", report_dir))
        shell("cp %s %s" % (proj + "/vcf_filter/*vcf", report_dir))
        if config["snpeff"]["do"]:
            shell("cp %s %s" % ("snpEff_summary.html", report_dir))
