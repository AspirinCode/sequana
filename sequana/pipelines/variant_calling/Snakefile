configfile: "config.yaml"

# Python -----------------------------------------------------------------------

final_output = [config["output"] + "/vcf_filter/" + config["output"] + ".vcf"]
indel_realigner_input = config["output"] + "/bwa_mem/" + config["output"] + \
    ".sorted.bam"
freebayes_input = config["output"] + "/bwa_mem/" + config["output"] + \
    ".sorted.bam"

# Mapping
include: config["rules_dir"] + "bwa_mem/bwa_mem.rules"

# Mapping report
if config["report_mapping"]["do"]:
    include: config["rules_dir"] + "bed_genomecov/bed_genomecov.rules"
    include: config["rules_dir"] + "report_mapping/report_mapping.rules"
    final_output.append("report/mapping.html")

# Mark duplicates
if config["mark_duplicates"]["do"]:
    include: config["rules_dir"] + "mark_duplicates/mark_duplicates.rules"
    indel_realigner_input = config["output"] + "/mark_duplicates/" + \
        config["output"] + ".bam"
    freebayes_input = config["output"] + "/mark_duplicates/" + \
        config["output"] + ".bam"
    
# Indel realigner
if config["indel_realigner"]["do"]:
    include: config["rules_dir"] + 
        "create_sequence_dictionary/create_sequence_dictionary.rules"
    include: config["rules_dir"] + "indel_realigner/indel_realigner.rules"
    freebayes_input = config["output"] + "/indel_realigner/" + \
        config["output"] + ".bam"

# Variant calling
include: config["rules_dir"] + "freebayes/freebayes.rules"

# VCF filter
include: config["rules_dir"] + "vcf_filter/vcf_filter.rules"

# Snakemake --------------------------------------------------------------------

rule all:
    input:
        final_output
