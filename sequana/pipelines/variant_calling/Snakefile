"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Variant calling
Data: paired end or single reads
Run: snakemake -s Snakefile
"""
# Import -----------------------------------------------------------------------

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory

# Import config file -----------------------------------------------------------

configfile: "config.yaml"
cfg = SequanaConfig(config)

# Python -----------------------------------------------------------------------

final_output = ["{0}/vcf_filter/{0}.vcf".format(cfg.PROJECT)]


# Mapping
exec(open(sequana.modules["bwa_mem_dynamic"], "r").read())
include: bwa_mem_dynamic("ref", cfg.DATASET)
__indel_realigner__input = __bwa_mem_ref__output
__freebayes__input = __bwa_mem_ref__output

# Mapping report
if config["report_mapping"]["do"]:
    include: sm.modules["bedtools_genomecov"]
    include: sm.modules["report_mapping"]
    final_output.append(__report_mapping__output)

# Mark duplicates
if config["mark_duplicates"]["do"]:
    include: sm.modules["mark_duplicates"]
    __indel_realigner__input = __mark_duplicates__output
    __freebayes__input = __mark_duplicates__output
    
# Indel realigner
if config["indel_realigner"]["do"]:
    include: sm.modules["create_sequence_dictionary"]
    include: sm.modules["indel_realigner"]
    __freebayes__input = __indel_realigner__output

# Variant calling
include: sm.modules["freebayes"]

# VCF filter
include: sm.modules["vcf_filter"]

# Snakemake --------------------------------------------------------------------

rule all:
    input:
        final_output
