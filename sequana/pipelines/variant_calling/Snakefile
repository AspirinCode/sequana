"""
Author: Dimitri Desvillechabrol
Affiliation: Institut Pasteur
Aim: Variant calling
Data: paired end or single reads
Run: snakemake -s Snakefile
"""
# Import -----------------------------------------------------------------------

import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory

# Import config file -----------------------------------------------------------

configfile: "config.yaml"
cfg = SequanaConfig(config)

# Python -----------------------------------------------------------------------

final_output = [config["output"] + "/vcf_filter/" + config["output"] + ".vcf"]
indel_realigner_input = config["output"] + "/bwa_mem/" + config["output"] + \
    ".sorted.bam"
freebayes_input = config["output"] + "/bwa_mem/" + config["output"] + \
    ".sorted.bam"

# Mapping
include: sm.modules["bwa_mem/bwa_mem.rules"]

# Mapping report
if config["report_mapping"]["do"]:
    include: sm.modules["bed_genomecov"]
    include: sm.modules["report_mapping"]
    final_output.append("report/mapping.html")

# Mark duplicates
if config["mark_duplicates"]["do"]:
    include: sm.modules["mark_duplicates"]
    indel_realigner_input = config["output"] + "/mark_duplicates/" + \
        config["output"] + ".bam"
    freebayes_input = config["output"] + "/mark_duplicates/" + \
        config["output"] + ".bam"
    
# Indel realigner
if config["indel_realigner"]["do"]:
    include: sm.modules["create_sequence_dictionary"]
    include: sm.modules["indel_realigner.rules"]
    freebayes_input = config["output"] + "/indel_realigner/" + \
        config["output"] + ".bam"

# Variant calling
include: sm.modules["freebayes"]

# VCF filter
include: sm.modules["vcf_filter"]

# Snakemake --------------------------------------------------------------------

rule all:
    input:
        final_output
