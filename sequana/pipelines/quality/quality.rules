
import sequana
from sequana import snaketools as sm
from sequana.snaketools import SequanaConfig, FileFactory
sm.init("quality.rules", globals())

# This must be defined before the include 
configfile: "config.yaml"


cfg = SequanaConfig(config)

expected_output = []

include: sm.modules['phix_removal']
config["adapter_removal_input"] = "bwa_bam_to_fastq"
config["identify_adapters_input"] = "bwa_bam_to_fastq"

# Include the cutadapt module
include: sm.modules['cutadapt']
expected_output += __cutadapt__output

# Include the identify_adapters module
#include: sm.modules['identify_adapters']
#expected_output += __identify_adapters__output

# import fastqc_ dynamic function
include: fastqc_dynamic("cutadapt", __cutadapt__output)
include: fastq_stats_dynamic("cutadapt", __cutadapt__output)



rule pipeline_quality:
    input:
        "report/report_phix_removal.html",
        expected_output,
        fastqc_cutadapt="fastqc_cutadapt/fastqc.done",
        fastq_stats_cutadapt="fastq_stats_cutadapt/fastq_stats.done"
    output:
        # Used by other workflow that uses this workflow
        touch("logs/pipeline_quality.done")
    run:
        from sequana import report_cutadapt
        from sequana import report_fastqc
        from sequana import report_fastq_stats
        s = report_cutadapt.CutAdaptReport(directory="report")
        s.read_data("logs/cutadapt.txt")
        s.create_report()

        # Now, the missing FastQC
        s = report_fastqc.FastQCReport(
                  "fastqc_cutadapt",
                  output_filename="fastqc__cutadapt.html",
                  directory="report")
        s.jinja['main_link'] = 'report_phix_removal.html'
        s.create_report()

        # And the missing FastQ
        s = report_fastq_stats.FastQStatsReport(
            "fastq_stats_cutadapt",
            output_filename="fastq_stats__cutadapt.html",
            directory="report")
        s.jinja['main_link'] = 'report_phix_removal.html'
        s.create_report()

        shell('ln -sf report_phix_removal.html report/pipeline_quality.html')


onsuccess:
    import os
    print("Workflow finished. Creating stats image")
    from sequana.snaketools import SnakeMakeStats
    try:
        SnakeMakeStats("stats.txt").plot_and_save("report/snakemake_stats.png")
        shell('rm stats.txt')
    except:
        pass
    print("HTML files and summary results are in ./report directory")




