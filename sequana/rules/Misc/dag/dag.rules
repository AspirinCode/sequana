"""

Author: Thomas Cokelaer
Affiliation: Institut Pasteur
Summary: a rule to create the DAG image from the Snakemake
Data:
Run: snakemake -s Snakefile
Changelog:

"""


rule dag:
    """DAG

    :param filename: input dot file to be parsed

    """
    input:
        filename = __dag__input,
#        config = __dag__input_configfile
    output:
        dot  = temp("dag.dot"),
        dot2 = temp("dag.ann.dot"),
        svg  = __dag__output
    params:
        configname = "config.yaml" # to move as an input in future releases
    message: """
    -- Creating DAG in a dot file and save into report/dag.svg
    """
    run:
        # Create the dot file (graphviz) using snakemake
        # Create a temporary directory to run the snakemake in it so that it
        # does not clash with the snakemake process where it is run. Indeed, 
        # in this rule, we call snakemake itself. 
        import tempfile
        import os
        from sequana import SequanaConfig, DOTParser
        directory = tempfile.TemporaryDirectory()
        cwd = os.getcwd()
        os.chdir(directory.name)
        output_filename = cwd + os.sep + output.dot

        # if it fails, we must reset the current working directory
        try:
            configname =  os.sep + params.configname, directory.name
            cfg = SequanaConfig(config)
            cfg.copy_requirements(target=directory.name)
            shell("cp %s %s " % (cwd + os.sep +"config.yaml", directory.name))
            shell("snakemake -s {input.filename} --dag --nolock > %s " % output_filename)
        except Exception as err:
            print(err)
        finally:
            os.chdir(cwd)

        # Annotate the dag with URLs 
        d = DOTParser(output_filename)
        d.add_urls()

        # Now, create the SVG. Somehow if called dag.svg, this is a conflict
        # hence the || true 
        shell("dot -Tsvg {output.dot2} -o {output.svg} || true")

