__sequana__cutadapt = [":fwd", ":rev", ":m", ":q"]

from sequana import SequanaConfig
cfg = SequanaConfig(config)
cfgca = cfg.config.cutadapt


prefix = cfg.PROJECT + "/cutadapt/"

__cutadapt__output = [prefix + cfg.BASENAME[0].replace(".fastq.gz", ".cutadapt.fastq.gz")]

if len(cfg.DATASET) == 2:
    __cutadapt__output.append(prefix + cfg.BASENAME[1].replace(".fastq.gz", ".cutadapt.fastq.gz"))


if "adapter_removal_input" in config.keys():
    if config["adapter_removal_input"] == "bwa_bam_to_fastq":
        __cutadapt__input = [cfg.PROJECT + "/bwa_bam_to_fastq/" + this for this in cfg.BASENAME]

    __cutadapt__input = [this.replace("_001.", ".unmapped.") for this in __cutadapt__input]

else:
    __cutadapt__input = cfg.DATASET[:]


if len(cfg.DATASET) == 2:
    rule cutadapt:
        input: 
            file1 = __cutadapt__input[0],
            file2 = __cutadapt__input[1]
        output:
            file1 = __cutadapt__output[0],
            file2 = __cutadapt__output[1]
        params:
            fwd= cfgca.fwd,
            rev= cfgca.rev,
            m= cfgca.m,
            quality= cfgca.quality,
            kwargs= cfgca.kwargs
        log: cfg.PROJECT + "/logs/cutadapt.txt"
        run:
            shell("cutadapt -o {output.file1} -p {output.file2}" 
                        " {input.file1} {input.file2} "
                        " -g {params.fwd} "
                        " -G {params.rev} "
                        " -m {params.m} "
                        " -q {params.quality} "
                        " {params.kwargs} > {log}")
else:
    rule cutadapt:
        input:
            file1 = __cutadapt__input[0],
        output:
            file1 = __cutadapt__output[0],
        params:
            fwd= cfgca.fwd,
            m= cfgca.m,
            quality= cfgca.quality,
            kwargs= cfgca.kwargs
        log: cfg.PROJECT + "/logs/cutadapt.txt"
        run:
            shell("cutadapt -o {output.file1} "
                    "     {input.file1}  "
                    "    -g {params.fwd} "
                    "    -m {params.m} "
                    "    -q {params.quality} "
                    "    {params.kwargs} > {log}")
