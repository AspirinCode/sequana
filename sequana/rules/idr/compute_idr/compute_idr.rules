rule compute_idr:
    """
    Irreproducibility Discovery Rate

    Required input:
        input1 = __compute_idr__input1 : peak file
        input2 = __compute_idr__input2 : peak file

    Required output:
        idr = __compute_idr__output: idr file
        peak = __compute_idr__output_peak: peaks passing IDR threshold

    Required configuration:
        .. code-block:: yaml

            compute_idr:
                mode:  # narrow/broad
                rank: # ranking method
                thresh = # idr threshold

    """
    input:
        input1 = __compute_idr__input1,
        input2 = __compute_idr__input2
    output:
        idr = __compute_idr__output,
        peak = __compute_idr__output_peak
    log:
        __compute_idr__log
    params:
        mode = config["compute_idr"]["mode_choice"],
        rank = config["compute_idr"]["rank"],
        thresh = config["compute_idr"]["thresh"]
    shell:
        """
        set +o pipefail
        nb_peak1=$(wc -l {input.input1} | cut -d' ' -f1)
        nb_peak2=$(wc -l {input.input2} | cut -d' ' -f1)
        if [ $nb_peak1 > 20 ] || [ $nb_peak2 > 20 ] ; then
            idr --samples {input.input1} {input.input2} \
                --input-file-type {params.mode} \
                --output-file {output.idr} \
                --rank {params.rank} \
                --soft-idr-threshold {params.thresh} \
                --plot 2> {log}

            IDR_tr=$(awk -v p={params.thresh} 'BEGIN{{print -log(p)/log(10)}}')
            awk 'BEGIN{{OFS="\t"}} $12>=$IDR_tr {{print $0}}' {output.idr} \
             | sort | uniq | sort -k7n,7n  > {output.peak}
        else
            echo "ValueError: Peak files must contain at least 20 peaks post-merge" 2> {log}
        fi
        """
