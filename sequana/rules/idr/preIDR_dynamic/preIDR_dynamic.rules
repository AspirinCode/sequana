def preIDR_dynamic(name):
    """
    Be careful, this dynamic function use shell, don't forget to double the brace characters

    :param name: name of the function
    :return: a dynamic snakemake rule for preIDR
    """

    metadata = {"name": name}

    preIDR_code = '''
rule preIDR_%(name)s:
    """
    pre-IDR rule preprocess bam files for IDR step

    Required input:
        __preIDR_%(name)s__input: list of bam file (IP or INPUT) at condition level (all replicates)

    Required output:
        __preIDR_%(name)s__output_done: peak file

    Required params:
        __preIDR_%(name)s__case : use case SPR, PPR, or Pool



    """

    input:
        __preIDR_%(name)s__input_bam
    params:
        case = __preIDR_%(name)s__case
    log:
        __preIDR_%(name)s__log
    output:
        __preIDR_%(name)s__output
    shell:
        """
        if [[ {params.case} == SPR ]]
        then
            i=1
            for file in {input} ; do
                if [ $i -eq 1 ] ; then SPR="SPR1" ; elif [ $i -eq 2 ] ; then SPR="SPR2" ; else SPR="SPR3"; fi

                echo "starting $SPR ..." > {log}

            done
            touch {output}
        elif [[ {params.case} == PPR ]] ; then

            FILE1={input[0]}
            FILE2={input[1]}
            FILE_Pool=${{FILE1/Rep1/Rep12-Pool}}
            echo "Merging BAM files for pseudoreplicates..." > {log}
            samtools merge $FILE_Pool $FILE1 $FILE2

            echo "Spliting bam file $FILE_Pool ..." > {log}
            nlinesPPR=$(samtools view $FILE_Pool | wc -l ) # Number of reads in the BAM file
            nlinesPPR=$(( ($nlinesSPR+1)/2 )) # half that number

            samtools view $FILE_Pool | shuf | split -d -l ${{nlinesPPR}} - ${{FILE_Pool%%.*}} # This will shuffle the lines in the file and split it into two SAM files

            cat ${{FILE_Pool%%.*}}_header.sam ${{FILE_Pool%%.*}}00 | samtools view -bS | samtools sort -o ${{FILE_Pool/Pool/PPR1}}
            cat ${{FILE_Pool%%.*}}_header.sam ${{FILE_Pool%%.*}}01 | samtools view -bS | samtools sort -o ${{FILE_Pool/Pool/PPR2}}

            echo "Indexing self pseudos-replicates Bamfiles ${{file}}" > {log}
            samtools index ${{FILE_Pool/Pool/PPR1}}
            samtools index ${{FILE_Pool/Pool/PPR2}}

            # Cleaning of useless files
                rm ${{FILE_Pool%%.*}}_header.sam
                rm ${{FILE_Pool%%.*}}00
                rm ${{FILE_Pool%%.*}}01

            touch {output}
        elif [[ {params.case} == Pool ]] ; then
            #Merge treatment BAMS
            echo "Merging BAM files for Input..."

            FILE1={input[0]}
            FILE2={input[1]}

            samtools merge {output} {input[0]} {input[1]}

            echo "Sorting pool Bamfile" > {log}
            samtools sort -o ${{FILE1/Rep1/Pool_sort}} ${{FILE1/Rep1/Pool}}

            echo "Indexing pool Bamfiles" > {log}
            samtools index ${{FILE1/Rep1/Pool_sort}}

            touch {output}
        else
            echo "unrecognized argument"
        fi
        touch {output}
        """
    '''

    from easydev import TempFile
    tt = TempFile()
    with open(tt.name, "w") as fh:
        fh.write(preIDR_code % metadata)
    return fh.name

