rule bowtie2_mapping:
    """
    Read mapping for either single end and paired end data using Bowtie2.

    Required input:
        __bowtie2_mapping__input: list with one or two fastq.gz

    Required output:
        __bowtie2_mapping__sort: output sorted bam file

    Config:

        __bowtie2_mapping__outdir: output directory
        __bowtie2_mapping__sam: output file in SAM format (temporary file)

        .. code-block:: yaml

            bowtie2_mapping:
                prefix_index: "" #path to the index file of reference genome
                options:  "" #options for bowtie1 you want use
    """

    input:
        fastq = __bowtie2_mapping__input,
        index = __bowtie2_mapping__index_done
    output:
        sort = __bowtie2_mapping__sort,
        bam = temp(__bowtie2_mapping__bam)
    log:
        err = __bowtie2_mapping__logs_err,
        out = __bowtie2_mapping__logs_out
    params:
        prefix_index = __bowtie2_mapping__prefix_index,
        options = config["bowtie2_mapping"]["options"]
    threads:
        config["bowtie2_mapping"]["threads"]
    run:
        cmd = "(bowtie2 -p {threads} {params.options} -x {params.prefix_index}"
        # paired end or single end
        if len(input.fastq) == 2:
            bowtie_input = "-1 " + input.fastq[0] + " -2 " + input.fastq[1]
        else:
            bowtie_input = "-U " + input.fastq[0]
        cmd = cmd + " " + bowtie_input
        # sam to bam
        cmd = cmd + " | samtools view -Sbh - > {output.bam})"
        # logs
        cmd = cmd + " > {log.out} 2> {log.err}"
        # sort result
        cmd = cmd + " && samtools sort -o {output.sort} {output.bam}"
        cmd = cmd + " && samtools index {output.sort}"

        shell(cmd)
