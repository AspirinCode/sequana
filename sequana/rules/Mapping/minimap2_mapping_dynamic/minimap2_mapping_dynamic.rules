def minimap2_mapping_dynamic(name, manager):

    metadata = {'name':name}

    minimap2_mapping_code = '''

rule minimap2_mapping_%(name)s:
    """
    Read mapping for Long Reads data using minimap2.

    Required input:
        __minimap2_mapping_%(name)s__input:  fastq.gz

    Required output:
        __minimap2_mapping_%(name)s__sort: output sorted bam file

    Config:

        __minimap2_mapping_%(name)s__bam: output file in BAM format (temporary file)

        .. code-block:: yaml

            minimap2_mapping:
                ref_file: "" #path to file of reference genome in fasta
                options:  "" #options for minimap2 you want use
    """
    input:
        __minimap2_mapping_%(name)s__input
    log:
        __minimap2_mapping_%(name)s__logs
    output:
        sort = __minimap2_mapping_%(name)s__sort,
        bam = temp(__minimap2_mapping_%(name)s__output_bam),
    params:
        ref = __minimap2_mapping_%(name)s__ref,
        kwargs = config['minimap2_mapping']['options']
    threads:
        config['minimap2_mapping']['threads']
    run:
        cmd = "minimap2 -t {threads} {params.kwargs} {params.ref} {input}"
        # sam to bam
        cmd = "%%s | samtools view -Sbh - > {output.bam}" %% cmd

        # logs
        cmd = "(%%s) 2> {log.err}" %% cmd

        # sort result
        cmd = "%%s && samtools sort -o {output.sort} {output.bam}" %% cmd
        cmd = "%%s && samtools index {output.sort}" %% cmd

    '''

    from sequana.snaketools import build_dynamic_rule
    return build_dynamic_rule(minimap2_mapping_code % metadata, manager.pipeline_dir)