# coding: utf-8
"""Read mapping for either singel end and paired end data using Bowtie1.

input:
    fastq -> list with one or two fastq.gz
    reference -> reference
"""

def bowtie1_mapping_dynamic(name, log_dir):
    metadata = {"name": name, "log_dir": log_dir}

    bowtie1_mapping_code = '''
rule bowtie1_mapping_%(name)s:
    input:
        fastq = __bowtie1_mapping_%(name)s__input,
        index_file = __bowtie1_mapping_%(name)s__prefix_index
    output:
        bam = __bowtie1_mapping_%(name)s__bam,
        sort = __bowtie1_mapping_%(name)s__sort
    log:
        out = "%(log_dir)s/bowtie1_mapping_%(name)s/bowtie_stdout.log",
        err = "%(log_dir)s/bowtie1_mapping_%(name)s/bowtie_stderr.log"
    params:
        options = config["bowtie1_mapping_%(name)s"]["options"]
    threads:
        __bowtie1_mapping_s(name)s__threads
    run:
        cmd = "bowtie -S {params.options} -p {threads}"
        # paired end or single end
        if len(input.fastq) == 2:
            cmd = "%s -1 {input.fastq[0]} -2 {input.fastq[1]}" % cmd
        else:
            cmd = "%s -1 {input.fastq}" % cmd
        # sam to bam
        cmd = "%s | samtools view -Sbh -> {output.bam}" % cmd
        
        # logs
        cmd = "(%s) > {log.out} 2> {log.err}"
        
        # sort result
        cmd = "%s && samtools sort -o {output.sort} {output.bam}" % cmd
        cmd = "%s && samtools index {output.sort}" % cmd

        shell(cmd)
        '''

        from easydev import TempFile
        tt = TempFile()
        with open(tt.name, "w") as fh:
            fh.write(bowtie1_mapping_code)
        return fh.name
