

rule kraken_to_krona:
    input: __kraken__output_wkdir + "/kraken.out.summary"
    output: __kraken__output_html
    run:
        shell("ktImportText %s -o %s" % (input, output))


rule kraken_translate:
    input: __kraken__output
    output:
        summary = __kraken__output_wkdir + "/kraken.out.summary",
        png = __kraken__output_wkdir + "/kraken.png",
    run:
        print(input[0])
        from sequana.kraken import KrakenResults
        k = KrakenResults(input[0])
        k.kraken_to_krona(output_filename=output.summary)
        df = k.plot(kind='pie')
        from pylab import savefig
        savefig(output.png)


rule kraken:
    """Kraken 

    Input:
        __kraken__input
    Output:

    Config:
        config['kraken']['database']

    """
    input: __kraken__input
    output:
        classified = __kraken__output_wkdir + "/kraken_classified.fastq",
        unclassified = __kraken__output_wkdir + "/kraken_unclassified.fastq",
        kraken = __kraken__output
    params:
        database = config['kraken']['database']
    threads: 4
    run:
        if len(input) == 1:
            shell("kraken -db {params.database} {input[0]} "
                " --threads {threads} --classified-out "
                " {output.classified} --unclassified-out {output.unclassified}"
                " --out {output.kraken}")
        elif len(input) == 2:
            shell("kraken -db {params.database}  {input[0]} {input[1]} "
                " --threads {threads}  --classified-out {output.classified} "
                " --unclassified-out {output.unclassified} --paired "
                "--out {output.kraken}")





